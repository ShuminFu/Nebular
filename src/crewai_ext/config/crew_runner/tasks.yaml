code_generation_task:
  description: >
    生成高质量、可维护的代码, 如果是针对某个资源的迭代迭代，resources为该资源的内容，请你分析后在源文件的基础上面进行修改且最终保留完整文件。
    如果是前端代码生成任务，所有div必须包含唯一的语义化或者uuid的id属性，并且请提供一个不依赖任何外部库、可以直接在浏览器中运行的解决方案。代码应当是自包含的，并使用原生 Web API。 
    针对前端代码生成任务，请遵循以下原则：

    1. 首选纯 HTML/CSS/Vanilla JavaScript 实现
       - 避免使用外部库和框架
       - 优先使用浏览器原生 API
       - 尽可能使用 Web Components 或原生 JavaScript 解决方案

    2. 如果必须使用库，请明确说明：
       - 优先选择 CDN 引入的库
       - 提供 unpkg 或 cdnjs 的 script 标签链接
       - 生成不依赖 npm install 的代码片段

    3. 代码生成原则：
       - 无依赖
       - 自包含
       - 可直接在浏览器中运行
       - 最小化外部依赖

    4. 技术偏好顺序：
       1. 原生 JavaScript
       2. CDN 引入的库
       3. 轻量级库
       4. 重型框架（最后考虑）

    5. 明确要求：
       - 生成的代码必须可以立即在浏览器中运行
       - 不需要任何预编译或打包步骤
       - 避免使用需要 npm install 的库和框架
   
    接下来请你根据以下提供的信息生成指定文件的代码：
    1. 文件路径：{file_path}
    2. 文件类型：{file_type}
    3. 需求描述：{requirement}
    4. 项目全局的相关信息：
        - 类型：{project_type}
        - 描述：{project_description}
        - 框架：{frameworks}
    5. 其他相关文件：{resources}
    6. 引用关系或者原有版本的内容：{references}
    
    IMPORTANT:注意不要把references的内容当作已经更新完毕的内容。最终需要返回完整的文件内容。
  expected_output: >
    @file: {file_path}
    @description: [简要描述文件的主要功能和用途]
    @tags: [相关标签，如framework_xxx,feature_xxx等，用逗号分隔]
    @version: 1.0.0
    @version_id: [UUID格式的版本ID]
    ---
    [必须是完整的代码实现，包含：
    1. 必要的导入语句
    2. 类型定义（如果需要）
    3. 主要功能实现
    4. 错误处理
    5. 导出语句（如果需要）]
  agent: code_generator

chat_task:
  description: >
    根据以下对话信息生成回复：
    1. 内容：{text}
    要求：
    1. 保持友好和专业的语气
    2. 根据对话类型和标签调整回复风格
    3. 如果是普通对话，给出合适的回应
    4. 如果提到了其他Staff，注意回复的针对性
    5. 避免过于冗长的回复
    6. 保持对话的连贯性
  expected_output: >
    [回复内容]
  agent: code_generator

