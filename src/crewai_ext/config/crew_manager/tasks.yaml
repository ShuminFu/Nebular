check_bot_task:
  description: "查询所有Bot列表中名为BotManager的Bot"
  expected_output: "返回不在活跃状态的Bot ID列表以及详情"
  agent: bot_manager

chat_task:
  description: >
    根据以下对话信息生成回复：
    1. 内容：{text}
    要求：
    1. 保持友好和专业的语气
    2. 根据对话类型和标签调整回复风格
    3. 如果是普通对话，给出合适的回应
    4. 如果提到了其他Staff，注意回复的针对性
    5. 避免过于冗长的回复
    6. 保持对话的连贯性
  expected_output: >
    返回一个友好且专业的回复文本
  agent: bot_manager

init_task:
  description: "Opera相当于一个隔离的业务沙箱，一个独立的工作空间或协作环境。请你根据用户对话需求{query},生成{num_runners}个CrewRunner配置来完成用户需求的任务。注意要分析每个CrewRunner的职责（不需要架构相关的职责），并生成每个CrewRunner的配置。其中每一个runner只有一个agent和一个task，runner的名字要尽可能地反应它在项目中的能力。"
  expected_output: |
    返回json格式的初始化CrewRunner的配置。json的字段意义参考如下示例：
    {{
      "runners": [
        {{
          "agents": {{
            "role": "根据需求分解任务后，针对这个任务能反映其职能的runner名称",
            "goal": "根据需求分解任务后，针对这个任务能反映其职能的runner目标",
            "backstory": "根据需求分解任务后，针对这个任务能反映其职能的runner背景",
          }},
          "tasks": {{
            "description": "根据需求分解任务后，针对这个任务能反映其职能的task",
            "expected_output": [
              "根据需求分解任务后，针对这个任务能反映其职能的expected_output",
            ]
          }}
        }},
        {{
          "agents": {{
            "role": "根据需求分解任务后，针对这个任务能反映其职能的runner名称",
            "goal": "根据需求分解任务后，针对这个任务能反映其职能的runner目标",
            "backstory": "根据需求分解任务后，针对这个任务能反映其职能的runner背景",
          }},
          "tasks": {{
            "description": "根据需求分解任务后，针对这个任务能反映其职能的task",
            "expected_output": [
              "根据需求分解任务后，针对这个任务能反映其职能的expected_output",
            ]
          }}
        }},
        {{
          "agents": {{
            "role": "根据需求分解任务后，针对这个任务能反映其职能的runner名称",
            "goal": "根据需求分解任务后，针对这个任务能反映其职能的runner目标",
            "backstory": "根据需求分解任务后，针对这个任务能反映其职能的runner背景",
          }},
          "tasks": {{
            "description": "根据需求分解任务后，针对这个任务能反映其职能的task",
            "expected_output": [
              "根据需求分解任务后，针对这个任务能反映其职能的expected_output",
            ]
          }}
        }}
      ]
    }}
  agent: bot_manager

