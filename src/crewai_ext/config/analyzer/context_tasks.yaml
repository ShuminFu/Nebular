index_task:
  description: >
    不使用任何工具，分析以下对话的上下文关联，关注代码生成相关的上下文：

    当前对话：
    - Opera ID: {opera_id}
    - 索引：{dialogue_index}
    - 内容：{text}
    - 类型：{type}
    - 标签：{tags}
    - 阶段：{stage_index}
    同阶段的对话：
    {dialogue_same_stage}

    分析要求：
    1. 识别相关的代码讨论
    2. 跟踪代码需求的变化
    3. 关联代码生成的上下文
    4. 考虑时序关系
    5. 分析对话意图的关联
    6. 优先关联同一阶段的对话

    返回格式：逗号分隔的相关对话索引列表。如果没有相关对话，返回"没有相关对话"。
  expected_output: "逗号分隔的相关对话DialogueIndex列表，例如：1,2,3"
  agent: context_analyzer

context_structure_task:
  description: |
    使用对话工具的get action来分析相关对话并生成结构化的上下文数据（非必要不使用get all来获取所有对话）：

    当前对话：
    - Opera ID: {opera_id}
    - 索引：{dialogue_index}
    - 内容：{text}
    - 类型：{type}
    - 标签：{tags}
    - 意图：{intent_analysis}

    相关对话：基于前一个任务得到的索引列表或者"没有相关对话"

    分析要求：
    1. 提取对话主题和关键信息
    2. 识别对话流程和状态变化
    3. 跟踪重要的上下文变量
    4. 记录关键的决策点
    5. 特别关注代码生成相关的上下文：
      - 代码需求的演变
      - API和框架的选择
      - 文件结构的变化
      - 重要的配置决定
    6. 主题定义规则：
        1. 主题独立性：
        - 每个主题代表一个明确的目标或需求
        - 当需求发生变更时，应创建新主题
        - 新主题应该关联到源主题
        - 必要的时候使用UUIDGeneratorTool工具创建UUID来创建主题

        2. 变更判断标准：
        - 功能需求的重大改变
        - 架构或设计的显著调整
        - 技术栈或依赖的变更
        - 与原主题目标的显著偏离

        3. 主题状态：
        - active: 当前正在处理的主题
        - completed: 已完成的主题
        - superseded: 被新主题取代的主题
  expected_output: |
    返回格式为JSON对象，包含对话流程、代码上下文和决策点信息
  agent: context_analyzer